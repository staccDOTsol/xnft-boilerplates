{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";var formatToList=function formatToList(items){return items.map(function(key){return\"- \"+key;}).join('\\n');};export default function validatePathConfig(config){var root=arguments.length>1&&arguments[1]!==undefined?arguments[1]:true;var validKeys=['initialRouteName','screens'];if(!root){validKeys.push('path','exact','stringify','parse');}var invalidKeys=Object.keys(config).filter(function(key){return!validKeys.includes(key);});if(invalidKeys.length){throw new Error(\"Found invalid properties in the configuration:\\n\"+formatToList(invalidKeys)+\"\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n\"+formatToList(validKeys)+\"\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.\");}if(config.screens){Object.entries(config.screens).forEach(function(_ref){var _ref2=_slicedToArray(_ref,2),_=_ref2[0],value=_ref2[1];if(typeof value!=='string'){validatePathConfig(value,false);}});}}","map":{"version":3,"sources":["validatePathConfig.tsx"],"names":["formatToList","items","map","key","join","validatePathConfig","config","root","validKeys","push","invalidKeys","Object","keys","filter","includes","length","Error","screens","entries","forEach","_","value"],"mappings":"iEAAA,GAAMA,aAAY,CAAIC,QAAhBD,aAAY,CAAIC,KAAe,QACnCA,MAAK,CAACC,GAAG,CAAEC,SAAAA,GAAG,aAAUA,GAAI,EAAC,CAAC,CAACC,IAAI,CAAC,IAAI,CAAC,GAE3C,cAAe,SAASC,mBAAkB,CAACC,MAAW,CAAe,CAAA,GAAbC,KAAI,CAAA,SAAA,CAAA,MAAA,CAAA,CAAA,EAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAG,IAAI,CACjE,GAAMC,UAAS,CAAG,CAAC,kBAAkB,CAAE,SAAS,CAAC,CAEjD,GAAI,CAACD,IAAI,CAAE,CACTC,SAAS,CAACC,IAAI,CAAC,MAAM,CAAE,OAAO,CAAE,WAAW,CAAE,OAAO,CAAC,CACvD,CAEA,GAAMC,YAAW,CAAGC,MAAM,CAACC,IAAI,CAACN,MAAM,CAAC,CAACO,MAAM,CAC3CV,SAAAA,GAAG,QAAK,CAACK,SAAS,CAACM,QAAQ,CAACX,GAAG,CAAC,GAClC,CAED,GAAIO,WAAW,CAACK,MAAM,CAAE,CACtB,KAAM,IAAIC,MAAK,oDACsChB,YAAY,CAC7DU,WAAW,CACX,sHAAoHV,YAAY,CAChIQ,SAAS,CACT,0HACH,CACH,CAEA,GAAIF,MAAM,CAACW,OAAO,CAAE,CAClBN,MAAM,CAACO,OAAO,CAACZ,MAAM,CAACW,OAAO,CAAC,CAACE,OAAO,CAAC,SAAA,IAAA,CAAgB,CAAf,yBAAU,IAAA,IAATC,CAAC,UAAEC,KAAK,UAC/C,GAAI,MAAOA,MAAK,GAAK,QAAQ,CAAE,CAC7BhB,kBAAkB,CAACgB,KAAK,CAAE,KAAK,CAAC,CAClC,CACF,CAAC,CAAC,CACJ,CACF","sourceRoot":"../../src","sourcesContent":["const formatToList = items => items.map(key => `- ${key}`).join('\\n');\nexport default function validatePathConfig(config) {\n  let root = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const validKeys = ['initialRouteName', 'screens'];\n  if (!root) {\n    validKeys.push('path', 'exact', 'stringify', 'parse');\n  }\n  const invalidKeys = Object.keys(config).filter(key => !validKeys.includes(key));\n  if (invalidKeys.length) {\n    throw new Error(`Found invalid properties in the configuration:\\n${formatToList(invalidKeys)}\\n\\nDid you forget to specify them under a 'screens' property?\\n\\nYou can only specify the following properties:\\n${formatToList(validKeys)}\\n\\nSee https://reactnavigation.org/docs/configuring-links for more details on how to specify a linking configuration.`);\n  }\n  if (config.screens) {\n    Object.entries(config.screens).forEach(_ref => {\n      let [_, value] = _ref;\n      if (typeof value !== 'string') {\n        validatePathConfig(value, false);\n      }\n    });\n  }\n}\n//# sourceMappingURL=validatePathConfig.js.map"]},"metadata":{},"sourceType":"module"}