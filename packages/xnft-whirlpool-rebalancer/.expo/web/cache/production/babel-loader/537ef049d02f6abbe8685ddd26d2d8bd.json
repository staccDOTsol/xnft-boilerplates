{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import{useState}from'react';import useNavigation from\"./useNavigation\";export default function useIsFocused(){var navigation=useNavigation();var _useState=useState(navigation.isFocused),_useState2=_slicedToArray(_useState,2),isFocused=_useState2[0],setIsFocused=_useState2[1];var valueToReturn=navigation.isFocused();if(isFocused!==valueToReturn){setIsFocused(valueToReturn);}React.useEffect(function(){var unsubscribeFocus=navigation.addListener('focus',function(){return setIsFocused(true);});var unsubscribeBlur=navigation.addListener('blur',function(){return setIsFocused(false);});return function(){unsubscribeFocus();unsubscribeBlur();};},[navigation]);React.useDebugValue(valueToReturn);return valueToReturn;}","map":{"version":3,"sources":["useIsFocused.tsx"],"names":["React","useState","useNavigation","useIsFocused","navigation","isFocused","setIsFocused","valueToReturn","useEffect","unsubscribeFocus","addListener","unsubscribeBlur","useDebugValue"],"mappings":"iEAAA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAC9B,OAASC,QAAQ,KAAQ,OAAO,CAEhC,MAAOC,cAAa,uBAMpB,cAAe,SAASC,aAAY,EAAY,CAC9C,GAAMC,WAAU,CAAGF,aAAa,EAAE,CAClC,cAAkCD,QAAQ,CAACG,UAAU,CAACC,SAAS,CAAC,wCAAzDA,SAAS,eAAEC,YAAY,eAE9B,GAAMC,cAAa,CAAGH,UAAU,CAACC,SAAS,EAAE,CAE5C,GAAIA,SAAS,GAAKE,aAAa,CAAE,CAM/BD,YAAY,CAACC,aAAa,CAAC,CAC7B,CAEAP,KAAK,CAACQ,SAAS,CAAC,UAAM,CACpB,GAAMC,iBAAgB,CAAGL,UAAU,CAACM,WAAW,CAAC,OAAO,CAAE,iBACvDJ,aAAY,CAAC,IAAI,CAAC,GACnB,CAED,GAAMK,gBAAe,CAAGP,UAAU,CAACM,WAAW,CAAC,MAAM,CAAE,iBACrDJ,aAAY,CAAC,KAAK,CAAC,GACpB,CAED,MAAO,WAAM,CACXG,gBAAgB,EAAE,CAClBE,eAAe,EAAE,CACnB,CAAC,CACH,CAAC,CAAE,CAACP,UAAU,CAAC,CAAC,CAEhBJ,KAAK,CAACY,aAAa,CAACL,aAAa,CAAC,CAElC,MAAOA,cAAa,CACtB","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport useNavigation from './useNavigation';\n\n/**\n * Hook to get the current focus state of the screen. Returns a `true` if screen is focused, otherwise `false`.\n * This can be used if a component needs to render something based on the focus state.\n */\nexport default function useIsFocused() {\n  const navigation = useNavigation();\n  const [isFocused, setIsFocused] = useState(navigation.isFocused);\n  const valueToReturn = navigation.isFocused();\n  if (isFocused !== valueToReturn) {\n    // If the value has changed since the last render, we need to update it.\n    // This could happen if we missed an update from the event listeners during re-render.\n    // React will process this update immediately, so the old subscription value won't be committed.\n    // It is still nice to avoid returning a mismatched value though, so let's override the return value.\n    // This is the same logic as in https://github.com/facebook/react/tree/master/packages/use-subscription\n    setIsFocused(valueToReturn);\n  }\n  React.useEffect(() => {\n    const unsubscribeFocus = navigation.addListener('focus', () => setIsFocused(true));\n    const unsubscribeBlur = navigation.addListener('blur', () => setIsFocused(false));\n    return () => {\n      unsubscribeFocus();\n      unsubscribeBlur();\n    };\n  }, [navigation]);\n  React.useDebugValue(valueToReturn);\n  return valueToReturn;\n}\n//# sourceMappingURL=useIsFocused.js.map"]},"metadata":{},"sourceType":"module"}