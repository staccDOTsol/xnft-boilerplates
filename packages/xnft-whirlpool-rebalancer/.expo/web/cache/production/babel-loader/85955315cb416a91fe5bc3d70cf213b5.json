{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import*as React from'react';import useNavigation from\"./useNavigation\";export default function useNavigationState(selector){var navigation=useNavigation();var _React$useState=React.useState(function(){return selector(navigation.getState());}),_React$useState2=_slicedToArray(_React$useState,2),setResult=_React$useState2[1];var selectorRef=React.useRef(selector);React.useEffect(function(){selectorRef.current=selector;});React.useEffect(function(){var unsubscribe=navigation.addListener('state',function(e){setResult(selectorRef.current(e.data.state));});return unsubscribe;},[navigation]);return selector(navigation.getState());}","map":{"version":3,"sources":["useNavigationState.tsx"],"names":["React","useNavigation","useNavigationState","selector","navigation","setResult","useState","getState","selectorRef","useRef","useEffect","current","unsubscribe","addListener","e","data","state"],"mappings":"iEACA,MAAO,GAAKA,MAAK,KAAM,OAAO,CAG9B,MAAOC,cAAa,uBAWpB,cAAe,SAASC,mBAAkB,CACxCC,QAAgC,CAC7B,CACH,GAAMC,WAAU,CAAGH,aAAa,EAA6B,CAI7D,oBAAsBD,KAAK,CAACM,QAAQ,CAAC,iBAAMH,SAAQ,CAACC,UAAU,CAACG,QAAQ,EAAE,CAAC,GAAC,oDAAlEF,SAAS,qBAGlB,GAAMG,YAAW,CAAGR,KAAK,CAACS,MAAM,CAACN,QAAQ,CAAC,CAE1CH,KAAK,CAACU,SAAS,CAAC,UAAM,CACpBF,WAAW,CAACG,OAAO,CAAGR,QAAQ,CAChC,CAAC,CAAC,CAEFH,KAAK,CAACU,SAAS,CAAC,UAAM,CACpB,GAAME,YAAW,CAAGR,UAAU,CAACS,WAAW,CAAC,OAAO,CAAGC,SAAAA,CAAC,CAAK,CACzDT,SAAS,CAACG,WAAW,CAACG,OAAO,CAACG,CAAC,CAACC,IAAI,CAACC,KAAK,CAAC,CAAC,CAC9C,CAAC,CAAC,CAEF,MAAOJ,YAAW,CACpB,CAAC,CAAE,CAACR,UAAU,CAAC,CAAC,CAEhB,MAAOD,SAAQ,CAACC,UAAU,CAACG,QAAQ,EAAE,CAAC,CACxC","sourceRoot":"../../src","sourcesContent":["import * as React from 'react';\nimport useNavigation from './useNavigation';\n/**\n * Hook to get a value from the current navigation state using a selector.\n *\n * @param selector Selector function to get a value from the state.\n */\nexport default function useNavigationState(selector) {\n  const navigation = useNavigation();\n\n  // We don't care about the state value, we run the selector again at the end\n  // The state is only to make sure that there's a re-render when we have a new value\n  const [, setResult] = React.useState(() => selector(navigation.getState()));\n\n  // We store the selector in a ref to avoid re-subscribing listeners every render\n  const selectorRef = React.useRef(selector);\n  React.useEffect(() => {\n    selectorRef.current = selector;\n  });\n  React.useEffect(() => {\n    const unsubscribe = navigation.addListener('state', e => {\n      setResult(selectorRef.current(e.data.state));\n    });\n    return unsubscribe;\n  }, [navigation]);\n  return selector(navigation.getState());\n}\n//# sourceMappingURL=useNavigationState.js.map"]},"metadata":{},"sourceType":"module"}