{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import{Platform}from'expo-modules-core';import invariant from'invariant';var EventTypes=['url'];var listeners=[];export default{addEventListener:function addEventListener(type,listener){var _this=this;if(!Platform.isDOMAvailable){return{remove:function remove(){}};}invariant(EventTypes.indexOf(type)!==-1,\"Linking.addEventListener(): \"+type+\" is not a valid event\");var nativeListener=function nativeListener(nativeEvent){return listener({url:window.location.href,nativeEvent:nativeEvent});};listeners.push({listener:listener,nativeListener:nativeListener});window.addEventListener('message',nativeListener,false);return{remove:function remove(){_this.removeEventListener(type,listener);}};},removeEventListener:function removeEventListener(type,listener){if(!Platform.isDOMAvailable){return;}invariant(EventTypes.indexOf(type)!==-1,\"Linking.removeEventListener(): \"+type+\" is not a valid event.\");var listenerIndex=listeners.findIndex(function(pair){return pair.listener===listener;});invariant(listenerIndex!==-1,'Linking.removeEventListener(): cannot remove an unregistered event listener.');var nativeListener=listeners[listenerIndex].nativeListener;window.removeEventListener('message',nativeListener,false);listeners.splice(listenerIndex,1);},canOpenURL:function(){var _canOpenURL=_asyncToGenerator(function*(url){return true;});function canOpenURL(_x){return _canOpenURL.apply(this,arguments);}return canOpenURL;}(),getInitialURL:function(){var _getInitialURL=_asyncToGenerator(function*(){if(!Platform.isDOMAvailable)return'';return window.location.href;});function getInitialURL(){return _getInitialURL.apply(this,arguments);}return getInitialURL;}(),openURL:function(){var _openURL=_asyncToGenerator(function*(url){if(Platform.isDOMAvailable){window.location=new URL(url,window.location).toString();}});function openURL(_x2){return _openURL.apply(this,arguments);}return openURL;}()};","map":{"version":3,"sources":["../src/ExpoLinking.web.ts"],"names":[],"mappings":"uEAAA,OAAS,QAAQ,KAAQ,mBAAmB,CAC5C,MAAO,UAAS,KAAM,WAAW,CAIjC,GAAM,WAAU,CAAG,CAAC,KAAK,CAAC,CAE1B,GAAM,UAAS,CAAmE,EAAE,CAEpF,cAAe,CACb,gBAAgB,2BAAC,IAAW,CAAE,QAAqB,CAAA,gBAEjD,GAAI,CAAC,QAAQ,CAAC,cAAc,CAAE,CAC5B,MAAO,CAAE,MAAM,kBAAA,CAAI,CAAC,CAAE,CACvB,CAED,SAAS,CACP,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAK,CAAC,CAAC,gCACA,IAAI,yBACpC,CACD,GAAM,eAAc,CAAsB,QAApC,eAAc,CAAuB,WAAW,QACpD,SAAQ,CAAC,CAAE,GAAG,CAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAE,WAAW,CAAX,WAAW,CAAE,CAAC,GACtD,SAAS,CAAC,IAAI,CAAC,CAAE,QAAQ,CAAR,QAAQ,CAAE,cAAc,CAAd,cAAc,CAAE,CAAC,CAC5C,MAAM,CAAC,gBAAgB,CAAC,SAAS,CAAE,cAAc,CAAE,KAAK,CAAC,CACzD,MAAO,CACL,MAAM,CAAE,iBAAK,CACX,KAAI,CAAC,mBAAmB,CAAC,IAAI,CAAE,QAAQ,CAAC,CAC1C,C,CACD,CACH,CAAC,CAED,mBAAmB,8BAAC,IAAW,CAAE,QAAqB,CAAA,CAEpD,GAAI,CAAC,QAAQ,CAAC,cAAc,CAAE,CAC5B,OACD,CACD,SAAS,CACP,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,GAAK,CAAC,CAAC,mCACG,IAAI,0BACvC,CACD,GAAM,cAAa,CAAG,SAAS,CAAC,SAAS,CAAC,SAAC,IAAI,QAAK,KAAI,CAAC,QAAQ,GAAK,QAAQ,GAAC,CAC/E,SAAS,CACP,aAAa,GAAK,CAAC,CAAC,CACpB,8EAA8E,CAC/E,CACD,GAAM,eAAc,CAAG,SAAS,CAAC,aAAa,CAAC,CAAC,cAAc,CAC9D,MAAM,CAAC,mBAAmB,CAAC,SAAS,CAAE,cAAc,CAAE,KAAK,CAAC,CAC5D,SAAS,CAAC,MAAM,CAAC,aAAa,CAAE,CAAC,CAAC,CACpC,CAAC,CAEK,UAAU,wDAAC,GAAW,CAAA,CAE1B,MAAO,KAAI,CACb,CAAC,0FAEK,aAAa,4DAAA,CACjB,GAAI,CAAC,QAAQ,CAAC,cAAc,CAAE,MAAO,EAAE,CACvC,MAAO,OAAM,CAAC,QAAQ,CAAC,IAAI,CAC7B,CAAC,iGAEK,OAAO,qDAAC,GAAW,CAAA,CACvB,GAAI,QAAQ,CAAC,cAAc,CAAE,CAE3B,MAAM,CAAC,QAAQ,CAAG,GAAI,IAAG,CAAC,GAAG,CAAE,MAAM,CAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAC3D,CACH,CAAC,iF,CACF","sourcesContent":["import { Platform } from 'expo-modules-core';\nimport invariant from 'invariant';\n\nimport { NativeURLListener, URLListener } from './Linking.types';\n\nconst EventTypes = ['url'];\n\nconst listeners: { listener: URLListener; nativeListener: NativeURLListener }[] = [];\n\nexport default {\n  addEventListener(type: 'url', listener: URLListener): { remove(): void } {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return { remove() {} };\n    }\n\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.addEventListener(): ${type} is not a valid event`\n    );\n    const nativeListener: NativeURLListener = (nativeEvent) =>\n      listener({ url: window.location.href, nativeEvent });\n    listeners.push({ listener, nativeListener });\n    window.addEventListener('message', nativeListener, false);\n    return {\n      remove: () => {\n        this.removeEventListener(type, listener);\n      },\n    };\n  },\n\n  removeEventListener(type: 'url', listener: URLListener): void {\n    // Do nothing in Node.js environments\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    invariant(\n      EventTypes.indexOf(type) !== -1,\n      `Linking.removeEventListener(): ${type} is not a valid event.`\n    );\n    const listenerIndex = listeners.findIndex((pair) => pair.listener === listener);\n    invariant(\n      listenerIndex !== -1,\n      'Linking.removeEventListener(): cannot remove an unregistered event listener.'\n    );\n    const nativeListener = listeners[listenerIndex].nativeListener;\n    window.removeEventListener('message', nativeListener, false);\n    listeners.splice(listenerIndex, 1);\n  },\n\n  async canOpenURL(url: string): Promise<boolean> {\n    // In reality this should be able to return false for links like `chrome://` on chrome.\n    return true;\n  },\n\n  async getInitialURL(): Promise<string> {\n    if (!Platform.isDOMAvailable) return '';\n    return window.location.href;\n  },\n\n  async openURL(url: string): Promise<void> {\n    if (Platform.isDOMAvailable) {\n      // @ts-ignore\n      window.location = new URL(url, window.location).toString();\n    }\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}