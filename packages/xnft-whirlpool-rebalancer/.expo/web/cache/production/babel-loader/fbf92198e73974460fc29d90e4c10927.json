{"ast":null,"code":"import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);enumerableOnly&&(symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable;})),keys.push.apply(keys,symbols);}return keys;}function _objectSpread(target){for(var i=1;i<arguments.length;i++){var source=null!=arguments[i]?arguments[i]:{};i%2?ownKeys(Object(source),!0).forEach(function(key){_defineProperty(target,key,source[key]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(target,Object.getOwnPropertyDescriptors(source)):ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key));});}return target;}import Constants from'expo-constants';import{Platform,UnavailabilityError}from'expo-modules-core';import invariant from'invariant';import qs from'qs';import{useEffect,useState}from'react';import URL from'url-parse';import NativeLinking from\"./ExpoLinking\";import{hasCustomScheme,resolveScheme}from\"./Schemes\";function validateURL(url){invariant(typeof url==='string','Invalid URL: should be a string. Was: '+url);invariant(url,'Invalid URL: cannot be empty');}function getHostUri(){var _Constants$manifest,_Constants$manifest2,_Constants$manifest2$,_Constants$manifest2$2;if((_Constants$manifest=Constants.manifest)!=null&&_Constants$manifest.hostUri){return Constants.manifest.hostUri;}else if((_Constants$manifest2=Constants.manifest2)!=null&&(_Constants$manifest2$=_Constants$manifest2.extra)!=null&&(_Constants$manifest2$2=_Constants$manifest2$.expoClient)!=null&&_Constants$manifest2$2.hostUri){return Constants.manifest2.extra.expoClient.hostUri;}else if(!hasCustomScheme()){return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/,'');}else{return null;}}function isExpoHosted(){var _Constants$manifest3,_Constants$manifest4,_Constants$manifest4$,_Constants$manifest4$2;var hostUri=getHostUri();return!!(hostUri&&(/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test|expo\\.dev)(:.*)?(\\/.*)?$/.test(hostUri)||(_Constants$manifest3=Constants.manifest)!=null&&_Constants$manifest3.developer||(_Constants$manifest4=Constants.manifest2)!=null&&(_Constants$manifest4$=_Constants$manifest4.extra)!=null&&(_Constants$manifest4$2=_Constants$manifest4$.expoGo)!=null&&_Constants$manifest4$2.developer));}function removeScheme(url){return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//,'');}function removePort(url){return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/,'');}function removeLeadingSlash(url){return url.replace(/^\\//,'');}function removeTrailingSlashAndQueryString(url){return url.replace(/\\/?\\?.*$/,'');}function ensureTrailingSlash(input,shouldAppend){var hasSlash=input.endsWith('/');if(hasSlash&&!shouldAppend){return input.substring(0,input.length-1);}else if(!hasSlash&&shouldAppend){return input+\"/\";}return input;}function ensureLeadingSlash(input,shouldAppend){var hasSlash=input.startsWith('/');if(hasSlash&&!shouldAppend){return input.substring(1);}else if(!hasSlash&&shouldAppend){return\"/\"+input;}return input;}export function makeUrl(){var path=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'';var queryParams=arguments.length>1?arguments[1]:undefined;var scheme=arguments.length>2?arguments[2]:undefined;return createURL(path,{queryParams:queryParams,scheme:scheme,isTripleSlashed:true});}export function createURL(path){var _ref=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{},scheme=_ref.scheme,_ref$queryParams=_ref.queryParams,queryParams=_ref$queryParams===void 0?{}:_ref$queryParams,_ref$isTripleSlashed=_ref.isTripleSlashed,isTripleSlashed=_ref$isTripleSlashed===void 0?false:_ref$isTripleSlashed;if(Platform.OS==='web'){if(!Platform.isDOMAvailable)return'';var origin=ensureTrailingSlash(window.location.origin,false);var _queryString=qs.stringify(queryParams);if(_queryString){_queryString=\"?\"+_queryString;}var outputPath=path;if(outputPath)outputPath=ensureLeadingSlash(path,true);return encodeURI(\"\"+origin+outputPath+_queryString);}var resolvedScheme=resolveScheme({scheme:scheme});var hostUri=getHostUri()||'';if(hasCustomScheme()&&isExpoHosted()){hostUri='';}if(path){if(isExpoHosted()&&hostUri){path=\"/--/\"+removeLeadingSlash(path);}if(isTripleSlashed&&!path.startsWith('/')){path=\"/\"+path;}}else{path='';}var queryString='';var queryStringMatchResult=hostUri.match(/(.*)\\?(.+)/);if(queryStringMatchResult){hostUri=queryStringMatchResult[1];queryString=queryStringMatchResult[2];var paramsFromHostUri={};try{var parsedParams=qs.parse(queryString);if(typeof parsedParams==='object'){paramsFromHostUri=parsedParams;}}catch(_unused){}queryParams=_objectSpread(_objectSpread({},queryParams),paramsFromHostUri);}queryString=qs.stringify(queryParams);if(queryString){queryString=\"?\"+queryString;}hostUri=ensureLeadingSlash(hostUri,!isTripleSlashed);return encodeURI(resolvedScheme+\":\"+(isTripleSlashed?'/':'')+\"/\"+hostUri+path+queryString);}export function parse(url){validateURL(url);var parsed=URL(url,true);for(var param in parsed.query){parsed.query[param]=decodeURIComponent(parsed.query[param]);}var queryParams=parsed.query;var hostUri=getHostUri()||'';var hostUriStripped=removePort(removeTrailingSlashAndQueryString(hostUri));var path=parsed.pathname||null;var hostname=parsed.hostname||null;var scheme=parsed.protocol||null;if(scheme){scheme=scheme.substring(0,scheme.length-1);}if(path){path=removeLeadingSlash(path);var expoPrefix=null;if(hostUriStripped){var parts=hostUriStripped.split('/');expoPrefix=parts.slice(1).concat(['--/']).join('/');}if(isExpoHosted()&&!hasCustomScheme()&&expoPrefix&&path.startsWith(expoPrefix)){path=path.substring(expoPrefix.length);hostname=null;}else if(path.indexOf('+')>-1){path=path.substring(path.indexOf('+')+1);}}return{hostname:hostname,path:path,queryParams:queryParams,scheme:scheme};}export function addEventListener(type,handler){return NativeLinking.addEventListener(type,handler);}export function removeEventListener(type,handler){NativeLinking.removeEventListener(type,handler);}export function parseInitialURLAsync(){return _parseInitialURLAsync.apply(this,arguments);}function _parseInitialURLAsync(){_parseInitialURLAsync=_asyncToGenerator(function*(){var initialUrl=yield NativeLinking.getInitialURL();if(!initialUrl){return{scheme:null,hostname:null,path:null,queryParams:null};}return parse(initialUrl);});return _parseInitialURLAsync.apply(this,arguments);}export function sendIntent(_x,_x2){return _sendIntent.apply(this,arguments);}function _sendIntent(){_sendIntent=_asyncToGenerator(function*(action,extras){if(Platform.OS==='android'){return yield NativeLinking.sendIntent(action,extras);}throw new UnavailabilityError('Linking','sendIntent');});return _sendIntent.apply(this,arguments);}export function openSettings(){return _openSettings.apply(this,arguments);}function _openSettings(){_openSettings=_asyncToGenerator(function*(){if(Platform.OS==='web'){throw new UnavailabilityError('Linking','openSettings');}if(NativeLinking.openSettings){return yield NativeLinking.openSettings();}yield openURL('app-settings:');});return _openSettings.apply(this,arguments);}export function getInitialURL(){return _getInitialURL.apply(this,arguments);}function _getInitialURL(){_getInitialURL=_asyncToGenerator(function*(){var _yield$NativeLinking$;return(_yield$NativeLinking$=yield NativeLinking.getInitialURL())!=null?_yield$NativeLinking$:null;});return _getInitialURL.apply(this,arguments);}export function openURL(_x3){return _openURL.apply(this,arguments);}function _openURL(){_openURL=_asyncToGenerator(function*(url){validateURL(url);return yield NativeLinking.openURL(url);});return _openURL.apply(this,arguments);}export function canOpenURL(_x4){return _canOpenURL.apply(this,arguments);}function _canOpenURL(){_canOpenURL=_asyncToGenerator(function*(url){validateURL(url);return yield NativeLinking.canOpenURL(url);});return _canOpenURL.apply(this,arguments);}export function useURL(){var _useState=useState(null),_useState2=_slicedToArray(_useState,2),url=_useState2[0],setLink=_useState2[1];function onChange(event){setLink(event.url);}useEffect(function(){getInitialURL().then(function(url){return setLink(url);});var subscription=addEventListener('url',onChange);return function(){return subscription.remove();};},[]);return url;}export*from\"./Linking.types\";export*from\"./Schemes\";","map":{"version":3,"sources":["../src/Linking.ts"],"names":[],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\nimport { Platform, UnavailabilityError } from 'expo-modules-core';\nimport invariant from 'invariant';\nimport qs from 'qs';\nimport { useEffect, useState } from 'react';\nimport { EmitterSubscription } from 'react-native';\nimport URL from 'url-parse';\n\nimport NativeLinking from './ExpoLinking';\nimport {\n  CreateURLOptions,\n  ParsedURL,\n  QueryParams,\n  SendIntentExtras,\n  URLListener,\n} from './Linking.types';\nimport { hasCustomScheme, resolveScheme } from './Schemes';\n\nfunction validateURL(url: string): void {\n  invariant(typeof url === 'string', 'Invalid URL: should be a string. Was: ' + url);\n  invariant(url, 'Invalid URL: cannot be empty');\n}\n\nfunction getHostUri(): string | null {\n  if (Constants.manifest?.hostUri) {\n    return Constants.manifest.hostUri;\n  } else if (Constants.manifest2?.extra?.expoClient?.hostUri) {\n    return Constants.manifest2.extra.expoClient.hostUri;\n  } else if (!hasCustomScheme()) {\n    // we're probably not using up-to-date xdl, so just fake it for now\n    // we have to remove the /--/ on the end since this will be inserted again later\n    return removeScheme(Constants.linkingUri).replace(/\\/--($|\\/.*$)/, '');\n  } else {\n    return null;\n  }\n}\n\nfunction isExpoHosted(): boolean {\n  const hostUri = getHostUri();\n  return !!(\n    hostUri &&\n    (/^(.*\\.)?(expo\\.io|exp\\.host|exp\\.direct|expo\\.test|expo\\.dev)(:.*)?(\\/.*)?$/.test(hostUri) ||\n      Constants.manifest?.developer ||\n      Constants.manifest2?.extra?.expoGo?.developer)\n  );\n}\n\nfunction removeScheme(url: string): string {\n  return url.replace(/^[a-zA-Z0-9+.-]+:\\/\\//, '');\n}\n\nfunction removePort(url: string): string {\n  return url.replace(/(?=([a-zA-Z0-9+.-]+:\\/\\/)?[^/]):\\d+/, '');\n}\n\nfunction removeLeadingSlash(url: string): string {\n  return url.replace(/^\\//, '');\n}\n\nfunction removeTrailingSlashAndQueryString(url: string): string {\n  return url.replace(/\\/?\\?.*$/, '');\n}\n\nfunction ensureTrailingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.endsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(0, input.length - 1);\n  } else if (!hasSlash && shouldAppend) {\n    return `${input}/`;\n  }\n  return input;\n}\n\nfunction ensureLeadingSlash(input: string, shouldAppend: boolean): string {\n  const hasSlash = input.startsWith('/');\n  if (hasSlash && !shouldAppend) {\n    return input.substring(1);\n  } else if (!hasSlash && shouldAppend) {\n    return `/${input}`;\n  }\n  return input;\n}\n\n// @needsAudit\n/**\n * Create a URL that works for the environment the app is currently running in.\n * The scheme in bare and standalone must be defined in the app.json under `expo.scheme`.\n *\n * # Examples\n * - Bare: empty string\n * - Standalone, Custom: `yourscheme:///path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path addition path components to append to the base URL.\n * @param queryParams An object with a set of query parameters. These will be merged with any\n * Expo-specific parameters that are needed (e.g. release channel) and then appended to the URL\n * as a query string.\n * @param scheme Optional URI protocol to use in the URL `<scheme>:///`, when `undefined` the scheme\n * will be chosen from the Expo config (`app.config.js` or `app.json`).\n * @return A URL string which points to your app with the given deep link information.\n * @deprecated An alias for [`createURL()`](#linkingcreateurlpath-namedparameters). This method is\n * deprecated and will be removed in a future SDK version.\n */\nexport function makeUrl(path: string = '', queryParams?: QueryParams, scheme?: string): string {\n  return createURL(path, { queryParams, scheme, isTripleSlashed: true });\n}\n\n// @needsAudit\n/**\n * Helper method for constructing a deep link into your app, given an optional path and set of query\n * parameters. Creates a URI scheme with two slashes by default.\n *\n * The scheme in bare and standalone must be defined in the Expo config (`app.config.js` or `app.json`)\n * under `expo.scheme`.\n *\n * # Examples\n * - Bare: `<scheme>://path` - uses provided scheme or scheme from Expo config `scheme`.\n * - Standalone, Custom: `yourscheme://path`\n * - Web (dev): `https://localhost:19006/path`\n * - Web (prod): `https://myapp.com/path`\n * - Expo Client (dev): `exp://128.0.0.1:19000/--/path`\n * - Expo Client (prod): `exp://exp.host/@yourname/your-app/--/path`\n *\n * @param path Addition path components to append to the base URL.\n * @param namedParameters Additional options object.\n * @return A URL string which points to your app with the given deep link information.\n */\nexport function createURL(\n  path: string,\n  { scheme, queryParams = {}, isTripleSlashed = false }: CreateURLOptions = {}\n): string {\n  if (Platform.OS === 'web') {\n    if (!Platform.isDOMAvailable) return '';\n\n    const origin = ensureTrailingSlash(window.location.origin, false);\n    let queryString = qs.stringify(queryParams);\n    if (queryString) {\n      queryString = `?${queryString}`;\n    }\n\n    let outputPath = path;\n    if (outputPath) outputPath = ensureLeadingSlash(path, true);\n\n    return encodeURI(`${origin}${outputPath}${queryString}`);\n  }\n\n  const resolvedScheme = resolveScheme({ scheme });\n\n  let hostUri = getHostUri() || '';\n\n  if (hasCustomScheme() && isExpoHosted()) {\n    hostUri = '';\n  }\n\n  if (path) {\n    if (isExpoHosted() && hostUri) {\n      path = `/--/${removeLeadingSlash(path)}`;\n    }\n    if (isTripleSlashed && !path.startsWith('/')) {\n      path = `/${path}`;\n    }\n  } else {\n    path = '';\n  }\n\n  // merge user-provided query params with any that were already in the hostUri\n  // e.g. release-channel\n  let queryString = '';\n  const queryStringMatchResult = hostUri.match(/(.*)\\?(.+)/);\n  if (queryStringMatchResult) {\n    hostUri = queryStringMatchResult[1];\n    queryString = queryStringMatchResult[2];\n    let paramsFromHostUri = {};\n    try {\n      const parsedParams = qs.parse(queryString);\n      if (typeof parsedParams === 'object') {\n        paramsFromHostUri = parsedParams;\n      }\n    } catch {}\n    queryParams = {\n      ...queryParams,\n      ...paramsFromHostUri,\n    };\n  }\n  queryString = qs.stringify(queryParams);\n  if (queryString) {\n    queryString = `?${queryString}`;\n  }\n\n  hostUri = ensureLeadingSlash(hostUri, !isTripleSlashed);\n\n  return encodeURI(\n    `${resolvedScheme}:${isTripleSlashed ? '/' : ''}/${hostUri}${path}${queryString}`\n  );\n}\n\n// @needsAudit\n/**\n * Helper method for parsing out deep link information from a URL.\n * @param url A URL that points to the currently running experience (e.g. an output of `Linking.createURL()`).\n * @return A `ParsedURL` object.\n */\nexport function parse(url: string): ParsedURL {\n  validateURL(url);\n\n  const parsed = URL(url, /* parseQueryString */ true);\n\n  for (const param in parsed.query) {\n    parsed.query[param] = decodeURIComponent(parsed.query[param]!);\n  }\n  const queryParams = parsed.query;\n\n  const hostUri = getHostUri() || '';\n  const hostUriStripped = removePort(removeTrailingSlashAndQueryString(hostUri));\n\n  let path = parsed.pathname || null;\n  let hostname = parsed.hostname || null;\n  let scheme = parsed.protocol || null;\n\n  if (scheme) {\n    // Remove colon at end\n    scheme = scheme.substring(0, scheme.length - 1);\n  }\n\n  if (path) {\n    path = removeLeadingSlash(path);\n\n    let expoPrefix: string | null = null;\n    if (hostUriStripped) {\n      const parts = hostUriStripped.split('/');\n      expoPrefix = parts.slice(1).concat(['--/']).join('/');\n    }\n\n    if (isExpoHosted() && !hasCustomScheme() && expoPrefix && path.startsWith(expoPrefix)) {\n      path = path.substring(expoPrefix.length);\n      hostname = null;\n    } else if (path.indexOf('+') > -1) {\n      path = path.substring(path.indexOf('+') + 1);\n    }\n  }\n\n  return {\n    hostname,\n    path,\n    queryParams,\n    scheme,\n  };\n}\n\n// @needsAudit\n/**\n * Add a handler to `Linking` changes by listening to the `url` event type and providing the handler.\n * It is recommended to use the [`useURL()`](#useurl) hook instead.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @return An EmitterSubscription that has the remove method from EventSubscription\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#addeventlistener).\n */\nexport function addEventListener(type: 'url', handler: URLListener): EmitterSubscription {\n  return NativeLinking.addEventListener(type, handler);\n}\n\n/**\n * Remove a handler by passing the `url` event type and the handler.\n * @param type The only valid type is `'url'`.\n * @param handler An [`URLListener`](#urllistener) function that takes an `event` object of the type\n * [`EventType`](#eventype).\n * @see [React Native Docs Linking page](https://reactnative.dev/docs/linking#removeeventlistener).\n *\n * @deprecated Call `remove()` on the return value of `addEventListener()` instead.\n */\nexport function removeEventListener(type: 'url', handler: URLListener): void {\n  NativeLinking.removeEventListener(type, handler);\n}\n\n// @needsAudit\n/**\n * Helper method which wraps React Native's `Linking.getInitialURL()` in `Linking.parse()`.\n * Parses the deep link information out of the URL used to open the experience initially.\n * If no link opened the app, all the fields will be `null`.\n * > On the web it parses the current window URL.\n * @return A promise that resolves with `ParsedURL` object.\n */\nexport async function parseInitialURLAsync(): Promise<ParsedURL> {\n  const initialUrl = await NativeLinking.getInitialURL();\n  if (!initialUrl) {\n    return {\n      scheme: null,\n      hostname: null,\n      path: null,\n      queryParams: null,\n    };\n  }\n\n  return parse(initialUrl);\n}\n\n// @needsAudit\n/**\n * Launch an Android intent with extras.\n * > Use [IntentLauncher](./intent-launcher) instead, `sendIntent` is only included in\n * > `Linking` for API compatibility with React Native's Linking API.\n * @platform android\n */\nexport async function sendIntent(action: string, extras?: SendIntentExtras[]): Promise<void> {\n  if (Platform.OS === 'android') {\n    return await NativeLinking.sendIntent(action, extras);\n  }\n  throw new UnavailabilityError('Linking', 'sendIntent');\n}\n\n// @needsAudit\n/**\n * Open the operating system settings app and displays the app’s custom settings, if it has any.\n */\nexport async function openSettings(): Promise<void> {\n  if (Platform.OS === 'web') {\n    throw new UnavailabilityError('Linking', 'openSettings');\n  }\n  if (NativeLinking.openSettings) {\n    return await NativeLinking.openSettings();\n  }\n  await openURL('app-settings:');\n}\n\n// @needsAudit\n/**\n * Get the URL that was used to launch the app if it was launched by a link.\n * @return The URL string that launched your app, or `null`.\n */\nexport async function getInitialURL(): Promise<string | null> {\n  return (await NativeLinking.getInitialURL()) ?? null;\n}\n\n// @needsAudit\n/**\n * Attempt to open the given URL with an installed app. See the [Linking guide](/guides/linking)\n * for more information.\n * @param url A URL for the operating system to open, eg: `tel:5555555`, `exp://`.\n * @return A `Promise` that is fulfilled with `true` if the link is opened operating system\n * automatically or the user confirms the prompt to open the link. The `Promise` rejects if there\n * are no applications registered for the URL or the user cancels the dialog.\n */\nexport async function openURL(url: string): Promise<true> {\n  validateURL(url);\n  return await NativeLinking.openURL(url);\n}\n\n// @needsAudit\n/**\n * Determine whether or not an installed app can handle a given URL.\n * On web this always returns `true` because there is no API for detecting what URLs can be opened.\n * @param url The URL that you want to test can be opened.\n * @return A `Promise` object that is fulfilled with `true` if the URL can be handled, otherwise it\n * `false` if not.\n *\n * The `Promise` will reject on Android if it was impossible to check if the URL can be opened, and\n * on iOS if you didn't [add the specific scheme in the `LSApplicationQueriesSchemes` key inside **Info.plist**](/guides/linking#linking-from-your-app).\n */\nexport async function canOpenURL(url: string): Promise<boolean> {\n  validateURL(url);\n  return await NativeLinking.canOpenURL(url);\n}\n\n// @needsAudit\n/**\n * Returns the initial URL followed by any subsequent changes to the URL.\n * @return Returns the initial URL or `null`.\n */\nexport function useURL(): string | null {\n  const [url, setLink] = useState<string | null>(null);\n\n  function onChange(event: { url: string }) {\n    setLink(event.url);\n  }\n\n  useEffect(() => {\n    getInitialURL().then((url) => setLink(url));\n    const subscription = addEventListener('url', onChange);\n    return () => subscription.remove();\n  }, []);\n\n  return url;\n}\n\nexport * from './Linking.types';\nexport * from './Schemes';\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}